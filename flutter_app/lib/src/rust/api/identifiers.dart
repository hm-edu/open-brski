// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `default`, `default`

Future<BleIdentifiers> getIdentifiers() =>
    RustLib.instance.api.crateApiIdentifiersGetIdentifiers();

class BleIdentifiers {
  final Identifier tpvr;
  final Identifier tper;
  final Identifier voucher;
  final Identifier caCerts;
  final Identifier enrollResponse;

  const BleIdentifiers({
    required this.tpvr,
    required this.tper,
    required this.voucher,
    required this.caCerts,
    required this.enrollResponse,
  });

  Future<Identifier> getCaCerts() =>
      RustLib.instance.api.crateApiIdentifiersBleIdentifiersGetCaCerts(
        that: this,
      );

  Future<Identifier> getEnrollResponse() =>
      RustLib.instance.api.crateApiIdentifiersBleIdentifiersGetEnrollResponse(
        that: this,
      );

  Future<Identifier> getTper() =>
      RustLib.instance.api.crateApiIdentifiersBleIdentifiersGetTper(
        that: this,
      );

  Future<Identifier> getTpvr() =>
      RustLib.instance.api.crateApiIdentifiersBleIdentifiersGetTpvr(
        that: this,
      );

  Future<Identifier> getVoucher() =>
      RustLib.instance.api.crateApiIdentifiersBleIdentifiersGetVoucher(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<BleIdentifiers> newInstance() =>
      RustLib.instance.api.crateApiIdentifiersBleIdentifiersNew();

  @override
  int get hashCode =>
      tpvr.hashCode ^
      tper.hashCode ^
      voucher.hashCode ^
      caCerts.hashCode ^
      enrollResponse.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BleIdentifiers &&
          runtimeType == other.runtimeType &&
          tpvr == other.tpvr &&
          tper == other.tper &&
          voucher == other.voucher &&
          caCerts == other.caCerts &&
          enrollResponse == other.enrollResponse;
}

class Identifier {
  final String uuid;
  final String readUuid;
  final String writeUuid;

  const Identifier({
    required this.uuid,
    required this.readUuid,
    required this.writeUuid,
  });

  Future<String> getReadUuid() =>
      RustLib.instance.api.crateApiIdentifiersIdentifierGetReadUuid(
        that: this,
      );

  Future<String> getUuid() =>
      RustLib.instance.api.crateApiIdentifiersIdentifierGetUuid(
        that: this,
      );

  Future<String> getWriteUuid() =>
      RustLib.instance.api.crateApiIdentifiersIdentifierGetWriteUuid(
        that: this,
      );

  @override
  int get hashCode => uuid.hashCode ^ readUuid.hashCode ^ writeUuid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Identifier &&
          runtimeType == other.runtimeType &&
          uuid == other.uuid &&
          readUuid == other.readUuid &&
          writeUuid == other.writeUuid;
}
